@startuml
title
C++
end title

class Channel{
    - m_fd:int
    - m_events:int
    - args: void
}

interface Dispatcher{
    + add():int
    + remove():int
    + modify():int
    + dispatch():int
    + setChannel():void
    # m_name:string
    # m_channel:Channel
    # m_evLoop:EventLoop
}

EpollDispatch -.|> Dispatcher
PollDispatch -.|> Dispatcher
SelectDispatch -.|> Dispatcher


struct ChannelElement
{
    + type : 如何处理该节点中的channel
    + channel: channel内容
    + next：下一个channelElement
}


struct ChannelMap
{
    + size
    + l ：链表Channel
}

class EventLoop{
    + m_isQuit 
    + m_dispatcher : Dispatcher指针
    + dispatcherData ： Dispatcherdata
    + head : 任务队列，指向第一个ChannelElement
    + tail : 指向末尾ChannelElement
    + *channelMap
    + threadID
    + threadName
    + mutex 
    + socketPair ：sockfd[2]
}

EventLoop --.> Channel
EventLoop --.> channelMap
EventLoop --.> head
head --> channelElement

EventLoop --.> tail
tail --> channelElement
EventLoop --.> Dispatcher 

class ThreadPool{
    + m_mainLoop ：EventLoop
    + m_isStart ：bool 
    + m_threadNum ：int 
    + m_workerThreads：vector_WorkerThread
    + m_index : int 
}

struct TcpServer{
    + threadNum:int 
    + mainLoop: 主反应堆模型
    + threadPool: 线程池
    + listener: 监听描述符
}

struct Listener{
    lfd: 文件描述符
    port：端口
}



TcpServer --.> ThreadPool
TcpServer --.> EventLoop
TcpServer --.>Listener

' main.c --> hh


@enduml